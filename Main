<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Time Clock</title>
  <style>
    :root{
      --bg:#0f172a;       /* slate-900 */
      --panel:#111827;    /* gray-900 */
      --muted:#94a3b8;    /* slate-400 */
      --text:#e5e7eb;     /* gray-200 */
      --accent:#22c55e;   /* green-500 */
      --accent2:#38bdf8;  /* sky-400 */
      --danger:#ef4444;   /* red-500 */
      --warn:#f59e0b;     /* amber-500 */
      --border:#1f2937;   /* gray-800 */
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Noto Sans","Apple Color Emoji","Segoe UI Emoji";background:var(--bg);color:var(--text)}
    .wrap{max-width:1100px;margin:0 auto;padding:24px}
    header{display:flex;gap:16px;align-items:center;justify-content:space-between;margin-bottom:16px}
    h1{font-size:24px;margin:0}
    .panel{background:var(--panel);border:1px solid var(--border);border-radius:16px;padding:16px}
    .grid{display:grid;gap:16px}
    @media(min-width:900px){.grid{grid-template-columns: 1.1fr 1fr}}
    .stat{display:flex;align-items:center;gap:12px}
    .stat .dot{width:10px;height:10px;border-radius:999px}
    .muted{color:var(--muted)}
    .btns{display:flex;flex-wrap:wrap;gap:10px}
    button, .btn{appearance:none;border:1px solid var(--border);background:#0b1220;color:var(--text);padding:10px 14px;border-radius:10px;cursor:pointer;font-weight:600}
    button:hover{border-color:#2b3547}
    .primary{background:linear-gradient(180deg,#14321d,#0b1d12);border-color:#1f5131}
    .primary:hover{border-color:#28703f}
    .accent{background:linear-gradient(180deg,#0b2232,#06141f);border-color:#215a75}
    .danger{background:linear-gradient(180deg,#381212,#1a0a0a);border-color:#6b1f1f}
    .warn{background:linear-gradient(180deg,#3a2a0a,#1a1205);border-color:#6b4a14}
    input, textarea, select{background:#0b1220;border:1px solid var(--border);color:var(--text);padding:10px;border-radius:10px;width:100%}
    table{width:100%;border-collapse:collapse;font-size:14px}
    th,td{padding:10px;border-bottom:1px solid var(--border);text-align:left}
    th{color:#cbd5e1;font-weight:700}
    tbody tr:hover{background:#0b1220}
    .right{text-align:right}
    .pill{display:inline-flex;align-items:center;gap:8px;border:1px solid var(--border);padding:6px 10px;border-radius:999px}
    .kbd{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;background:#0b1220;border:1px solid var(--border);padding:2px 6px;border-radius:6px}
    footer{margin-top:20px;color:var(--muted);font-size:12px}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>Time Clock</h1>
      <div class="pill"><span class="dot" id="statusDot" style="background: #6b7280"></span> <span id="statusText">Idle</span></div>
    </header>

    <div class="grid">
      <!-- LEFT: Controls & Live session -->
      <section class="panel">
        <h2 style="margin-top:0">Controls</h2>
        <div class="btns" style="margin-bottom:12px">
          <button id="btnClockIn" class="primary">Clock In</button>
          <button id="btnClockOut" class="accent">Clock Out</button>
          <button id="btnAddNote" class="warn">Add Note</button>
          <button id="btnExport" title="Download CSV of entries">Export CSV</button>
          <button id="btnExportJson" title="Download JSON backup">Export JSON</button>
          <button id="btnImportJson" class="" title="Restore from JSON backup">Import JSON</button>
          <button id="btnClear" class="danger">Clear Data</button>
        </div>

        <div class="panel" style="background:#0b1220">
          <div class="stat">
            <div class="dot" id="liveDot" style="background:#6b7280"></div>
            <div>
              <div class="muted" style="font-size:12px">Live Session</div>
              <div id="liveTimer" style="font-size:28px;font-weight:800;letter-spacing:0.5px">00:00:00</div>
            </div>
          </div>
          <div style="margin-top:12px;display:grid;grid-template-columns:1fr 1fr;gap:10px">
            <div>
              <div class="muted" style="font-size:12px">Clock In</div>
              <div id="liveIn">—</div>
            </div>
            <div>
              <div class="muted" style="font-size:12px">Clock Out</div>
              <div id="liveOut">—</div>
            </div>
          </div>
        </div>

        <div style="margin-top:12px">
          <label for="note">Quick note (applies to last entry):</label>
          <textarea id="note" rows="2" placeholder="e.g., Morning shift, project A"></textarea>
        </div>
      </section>

      <!-- RIGHT: Summary -->
      <section class="panel">
        <h2 style="margin-top:0">Summary</h2>
        <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px">
          <div class="panel" style="background:#0b1220">
            <div class="muted" style="font-size:12px">Today</div>
            <div id="sumToday" style="font-size:22px;font-weight:800">0h 00m</div>
          </div>
          <div class="panel" style="background:#0b1220">
            <div class="muted" style="font-size:12px">This Week (Mon–Sun)</div>
            <div id="sumWeek" style="font-size:22px;font-weight:800">0h 00m</div>
          </div>
        </div>
        <div style="margin-top:10px" class="muted">Tip: press <span class="kbd">I</span> to clock in, <span class="kbd">O</span> to clock out.</div>
      </section>
    </div>

    <section class="panel" style="margin-top:16px">
      <h2 style="margin-top:0">Entries</h2>
      <div style="overflow:auto">
        <table id="tbl">
          <thead>
            <tr>
              <th>Date</th>
              <th>In</th>
              <th>Out</th>
              <th class="right">Duration</th>
              <th>Note</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="tbody"></tbody>
          <tfoot>
            <tr>
              <td colspan="6" class="muted">All data is stored locally in your browser (localStorage).</td>
            </tr>
          </tfoot>
        </table>
      </div>
    </section>

    <footer>
      <div>© <span id="yr"></span> Time Clock. Local-first, no server required.</div>
    </footer>
  </div>

  <script>
    // ======= Utilities =======
    const $ = (sel) => document.querySelector(sel);
    const $$ = (sel) => Array.from(document.querySelectorAll(sel));
    const pad = (n) => String(n).padStart(2, '0');

    const fmtTime = (d) => `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    const fmtDate = (d) => d.toLocaleDateString(undefined, {year:'numeric', month:'short', day:'2-digit'});
    const fmtHM = (ms) => {
      const s = Math.floor(ms/1000);
      const h = Math.floor(s/3600);
      const m = Math.floor((s%3600)/60);
      return `${h}h ${pad(m)}m`;
    };

    const startOfToday = () => { const d = new Date(); d.setHours(0,0,0,0); return d; };
    const startOfWeek = () => {
      const d = new Date();
      const day = (d.getDay()+6)%7; // Monday=0
      d.setDate(d.getDate()-day);
      d.setHours(0,0,0,0);
      return d;
    };

    // ======= Storage Model =======
    const KEY = 'timeclock.entries.v1';
    let entries = load();

    function load(){
      try{
        const raw = localStorage.getItem(KEY);
        const arr = raw ? JSON.parse(raw) : [];
        return Array.isArray(arr) ? arr : [];
      }catch(e){
        console.warn('load failed', e); return [];
      }
    }
    function save(){ localStorage.setItem(KEY, JSON.stringify(entries)); }

    function activeEntry(){ return entries.find(e=>!e.outISO); }

    function addEntryIn(){
      if(activeEntry()) return false; // prevent overlapping sessions
      entries.unshift({ id: crypto.randomUUID(), inISO: new Date().toISOString(), outISO: null, note: ($("#note").value||"").trim() || null });
      save();
      return true;
    }

    function clockOut(){
      const a = activeEntry();
      if(!a) return false;
      a.outISO = new Date().toISOString();
      // if no note yet, pull from textarea at time of clock-out
      if(!a.note){ const n = ( $("#note").value||"" ).trim(); if(n) a.note = n; }
      save();
      return true;
    }

    function setNoteFor(id, text){
      const e = entries.find(x=>x.id===id);
      if(!e) return;
      e.note = text || null;
      save();
    }

    function removeEntry(id){
      entries = entries.filter(x=>x.id!==id);
      save();
    }

    function entryDurationMs(e){
      const t0 = new Date(e.inISO).getTime();
      const t1 = e.outISO ? new Date(e.outISO).getTime() : Date.now();
      return Math.max(0, t1 - t0);
    }

    // ======= Rendering =======
    const tbody = $("#tbody");

    function render(){
      // Status + live card
      const a = activeEntry();
      if(a){
        $("#statusText").textContent = 'Active';
        $("#statusDot").style.background = 'var(--accent)';
        $("#liveDot").style.background = 'var(--accent)';
        $("#liveIn").textContent = new Date(a.inISO).toLocaleString();
        $("#liveOut").textContent = '—';
      } else {
        $("#statusText").textContent = 'Idle';
        $("#statusDot").style.background = '#6b7280';
        $("#liveDot").style.background = '#6b7280';
        $("#liveIn").textContent = '—';
        $("#liveOut").textContent = '—';
        $("#liveTimer").textContent = '00:00:00';
      }

      // Entries table
      tbody.innerHTML = entries.map(e=>{
        const dIn = new Date(e.inISO);
        const dOut = e.outISO ? new Date(e.outISO) : null;
        const dur = fmtHM(entryDurationMs(e));
        return `<tr>
          <td>${fmtDate(dIn)}</td>
          <td>${fmtTime(dIn)}</td>
          <td>${dOut?fmtTime(dOut):'—'}</td>
          <td class="right">${dur}</td>
          <td>${e.note?escapeHtml(e.note):''}</td>
          <td class="right">
            ${dOut?`<button data-edit="${e.id}">Edit</button>`:''}
            <button data-del="${e.id}" class="danger">Delete</button>
          </td>
        </tr>`;
      }).join("");

      // Summary
      const today0 = startOfToday().getTime();
      const week0  = startOfWeek().getTime();
      let msToday = 0, msWeek = 0;
      for(const e of entries){
        const tIn = new Date(e.inISO).getTime();
        const ms = entryDurationMs(e);
        if(tIn >= today0) msToday += ms;
        if(tIn >= week0)  msWeek  += ms;
      }
      $("#sumToday").textContent = fmtHM(msToday);
      $("#sumWeek").textContent  = fmtHM(msWeek);
    }

    function escapeHtml(s){
      return s.replace(/[&<>"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c]));
    }

    // Live timer
    setInterval(()=>{
      const a = activeEntry();
      if(!a) return;
      const ms = entryDurationMs(a);
      const h = Math.floor(ms/3600000);
      const m = Math.floor((ms%3600000)/60000);
      const s = Math.floor((ms%60000)/1000);
      $("#liveTimer").textContent = `${pad(h)}:${pad(m)}:${pad(s)}`;
    }, 1000);

    // ======= Events =======
    $("#btnClockIn").addEventListener('click', ()=>{ if(addEntryIn()){ render(); } });
    $("#btnClockOut").addEventListener('click', ()=>{ if(clockOut()){ $("#liveOut").textContent = new Date().toLocaleString(); render(); } });

    $("#btnAddNote").addEventListener('click', ()=>{
      const n = $("#note").value.trim();
      if(!n){ alert('Type a note first.'); return; }
      if(entries.length===0){ alert('No entries yet.'); return; }
      const lastId = entries[0].id; // newest first
      setNoteFor(lastId, n);
      $("#note").value = '';
      render();
    });

    tbody.addEventListener('click', (ev)=>{
      const delId = ev.target.getAttribute('data-del');
      if(delId){ if(confirm('Delete this entry?')){ removeEntry(delId); render(); } return; }
      const editId = ev.target.getAttribute('data-edit');
      if(editId){
        const e = entries.find(x=>x.id===editId);
        const newNote = prompt('Edit note:', e?.note||'') || '';
        setNoteFor(editId, newNote.trim());
        render();
      }
    });

    document.addEventListener('keydown', (e)=>{
      if(e.target && ['INPUT','TEXTAREA'].includes(e.target.tagName)) return;
      if(e.key.toLowerCase()==='i'){ if(addEntryIn()) render(); }
      if(e.key.toLowerCase()==='o'){ if(clockOut()){ $("#liveOut").textContent = new Date().toLocaleString(); render(); } }
    });

    $("#btnClear").addEventListener('click', ()=>{
      if(!confirm('Clear ALL time entries?')) return;
      entries = [];
      save();
      render();
    });

    // Export/Import
    function download(filename, text){
      const blob = new Blob([text], {type: 'text/plain'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = filename; a.click();
      URL.revokeObjectURL(url);
    }

    $("#btnExport").addEventListener('click', ()=>{
      const rows = [
        ['id','date','in','out','duration_ms','note']
      ];
      for(const e of entries.slice().reverse()){ // oldest to newest
        const ms = entryDurationMs(e);
        const dIn = new Date(e.inISO);
        const dOut = e.outISO ? new Date(e.outISO) : null;
        rows.push([
          e.id,
          fmtDate(dIn),
          dIn.toISOString(),
          dOut? dOut.toISOString(): '',
          String(ms),
          (e.note||'').replaceAll('\n',' ')
        ]);
      }
      const csv = rows.map(r=>r.map(x=>`"${String(x).replaceAll('"','""')}"`).join(',')).join('\n');
      download('time-entries.csv', csv);
    });

    $("#btnExportJson").addEventListener('click', ()=>{
      download('time-entries.json', JSON.stringify(entries, null, 2));
    });

    $("#btnImportJson").addEventListener('click', ()=>{
      const inp = document.createElement('input');
      inp.type = 'file'; inp.accept = 'application/json';
      inp.onchange = (ev)=>{
        const f = ev.target.files?.[0]; if(!f) return;
        const reader = new FileReader();
        reader.onload = ()=>{
          try{
            const arr = JSON.parse(String(reader.result));
            if(!Array.isArray(arr)) throw new Error('Invalid format');
            // Basic schema guard
            for(const e of arr){ if(!e.inISO || typeof e.inISO!== 'string') throw new Error('Bad entry'); }
            entries = arr;
            save();
            render();
          }catch(err){ alert('Import failed: '+ err.message); }
        };
        reader.readAsText(f);
      };
      inp.click();
    });

    // Init
    $("#yr").textContent = new Date().getFullYear();
    render();
  </script>
</body>
</html>

